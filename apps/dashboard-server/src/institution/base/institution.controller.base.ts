/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InstitutionService } from "../institution.service";
import { InstitutionCreateInput } from "./InstitutionCreateInput";
import { Institution } from "./Institution";
import { InstitutionFindManyArgs } from "./InstitutionFindManyArgs";
import { InstitutionWhereUniqueInput } from "./InstitutionWhereUniqueInput";
import { InstitutionUpdateInput } from "./InstitutionUpdateInput";

export class InstitutionControllerBase {
  constructor(protected readonly service: InstitutionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Institution })
  async createInstitution(
    @common.Body() data: InstitutionCreateInput
  ): Promise<Institution> {
    return await this.service.createInstitution({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Institution] })
  @ApiNestedQuery(InstitutionFindManyArgs)
  async institutions(@common.Req() request: Request): Promise<Institution[]> {
    const args = plainToClass(InstitutionFindManyArgs, request.query);
    return this.service.institutions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Institution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async institution(
    @common.Param() params: InstitutionWhereUniqueInput
  ): Promise<Institution | null> {
    const result = await this.service.institution({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Institution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInstitution(
    @common.Param() params: InstitutionWhereUniqueInput,
    @common.Body() data: InstitutionUpdateInput
  ): Promise<Institution | null> {
    try {
      return await this.service.updateInstitution({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Institution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInstitution(
    @common.Param() params: InstitutionWhereUniqueInput
  ): Promise<Institution | null> {
    try {
      return await this.service.deleteInstitution({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
